<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.UserRepository">
    <sql id="SELECT_BASE">
        SELECT
        id
        , username
        , password
        , name
        , createdAt
        , provider
        , providerId
        ,latitude
        ,longitude
        ,status
        ,pause_end_date "pauseEndDate"
        FROM user
        WHERE 1 = 1
    </sql>

    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.User"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO user(username, name, password, provider, providerId, latitude, longitude)
        VALUES (#{username}, #{name}, #{password}, #{provider}, #{providerId}, #{latitude}, #{longitude});
    </insert>

    <select id="findById" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        and id = #{id};
    </select>

    <select id="findByUsername" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        and username = #{username};
    </select>

    <select id="findByName" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        and name = #{name};
    </select>

    <update id="update" parameterType="com.lec.spring.domain.User" flushCache="true">
        update user
        set name = #{name}, password = #{password}
        where id = #{id};
    </update>

    <insert id="saveLogin">
        insert into loginhistory(user_id)
        values(#{id});
    </insert>

    <update id="updateLocation" parameterType="com.lec.spring.domain.User" flushCache="true">
        update user
        set latitude=#{latitude}, longitude=#{longitude}
        where id=#{id}
    </update>

    <update id="updateState" parameterType="com.lec.spring.domain.User" flushCache="true">
        update user
        set status = #{status}, pause_end_date = #{pauseEndDate}
        where id = #{id};
    </update>

    <select id="findNearUsers" resultType="com.lec.spring.domain.User">
        select distinct u.id "id",
        u.username "username",
        u.password "password",
        u.name "name",
        u.createdAt "createdAt",
        u.provider "provider",
        u.providerId "providerId",
        u.latitude "latitude",
        u.longitude "longitude",
        u.status "status"
        from user u, post p
        where u.id=p.user_id;
    </select>

    <select id="findUsersByWarnCount" resultType="com.lec.spring.domain.User">
        select u.id "id",
        u.username "username",
        u.name "name",
        u.status "status",
        u.pause_end_date "pauseEndDate",
        count(*) "warningCount"
        from user u, warning w, post p
        where w.post_id = p.id and u.id = p.user_id
        group by u.id, u.username, u.status
        having count(*) between #{warnCount1} and #{warnCount2}
    </select>
</mapper>